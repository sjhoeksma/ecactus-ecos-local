#The script to configure an ESP32 with a RS485 board connected to communicate with eCACTUS ecos 
#Based on https://github.com/driesk81/home-assistant-modbus-home-battery-blauhoff/blob/main/allinoneBMS.yml
#and https://community.home-assistant.io/t/interface-home-battery-blauhoff-or-ecactus-via-esphome-and-modbus/645345
substitutions:
  name: ecactus-ecos-esp
  friendly_name: eCACTUS ecos

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: ecactus.ecos-esp
    version: '1.0'

# Specify the board used, I use an ESP32-s3 
# but uncomment the esp32dev and comment the 2 lines with esp32-s3 when using a normal ESP32
esp32:
#  board: esp32dev
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

external_components:
# Use from local path for development
  - source:
      type: local
      path: components
# use a component from a local git repository
  #  - source: github://sjhoeksma/esphome@sniffer
  #    components: [ modbus , modbus_controller]

# Enable logging, default is DEBUG
logger:
  #level: VERBOSE
  #level : ERROR
  level: INFO

# Enable Home Assistant API
api:
   encryption:
    key: !secret device_key

# Set the Over the Air password
ota:
  - platform: esphome
    #safe_mode: true
    password: !secret ota_password

# Enable Web server if needed for debuging
web_server:
  port: 80

# Enable wifi
wifi:
  use_address: 10.0.0.233
  ssid: !secret wifi_ssid_home
  password: !secret wifi_password_home

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: "123456789"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# # Sets up Bluetooth LE (Only on ESP32) to allow the user
# # to provision wifi credentials to the device.
# esp32_improv:
#   authorizer: none

# # Sets up the improv via serial client for Wi-Fi provisioning
# improv_serial:
#   next_url: https://example.com/project-template/manual?ip={{ip_address}}&name={{device_name}}&version={{esphome_version}}


# Define the uart ports we are going
uart:
    id: rs485_uart
    tx_pin: GPIO6
    rx_pin: GPIO5
    baud_rate: 115200
    stop_bits: 1

modbus:
    uart_id: rs485_uart
    id: modbus_uart_1
    role: shared

modbus_controller:
  - id: modbus_addr_1
    address: 0x1 # the Modbus device address of the master
    #setup_priority: -100 #Priority very late
    modbus_id: modbus_uart_1
    update_interval: 5s
    command_throttle: 5ms
    #offline_skip_updates: 10
    max_cmd_retries: 10
    #allow_duplicate_commands : true

  - id: modbus_addr_2
    address: 0x2 # the Modbus device address of the slave
    #setup_priority: -100
    modbus_id: modbus_uart_1
    update_interval: 2s
    #command_throttle: 10ms
    #offline_skip_updates: 10
    max_cmd_retries: 10
    mode: sniffer

# #define variables
# globals:
#   - id: workmode_var
#     type: int
#     initial_value: '0' # normal mode
#   - id: batt_min_capacity_var
#     type: int
#     initial_value: '10' # 10%
#   - id: VPP_timer_var
#     type: int
#     initial_value: '0' # 0 sec
#   - id: VPP_timer_enable_var
#     type: int
#     initial_value: "0" # 0 = disable
#   - id: Power_Ref_Selector_var
#     type: uint
#     initial_value: "0" # 0
#   - id: VPP_timer_selector_var
#     type: int
#     initial_value: '0'
#   - id: max_feedin_selector_var
#     type: int
#     initial_value: '0' # 0 

# Add a switch 
switch:
  - platform: restart
    name: "Restart Monitor"

sensor:
#--- GLOBAL Sensors -----------------------------------
  - platform: template
    name: "# PV power"
    id: pv_power_sensor
    icon: mdi:solar-power-variant-outline
    unit_of_measurement: "W"

  - platform: template
    name: "# Home power"
    id: home_power_sensor
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: "W"
  
  - platform: template
    name: "# Battery power"
    id: battery_power_sensor
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: "W"

  - platform: template
    name: "# SOC"
    id: batt_soc_sensor
    icon: mdi:battery-charging-medium
    unit_of_measurement: "%"
   
  - platform: template
    name: "#1 PV power"
    id: pv_power_sensor_1
    icon: mdi:solar-power-variant-outline
    unit_of_measurement: "W"
 
  - platform: template
    name: "#1 Home power"
    id: home_power_sensor_1
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: "W"
 
  - platform: template
    name: "#2 PV power"
    id: pv_power_sensor_2
    icon: mdi:solar-power-variant-outline
    unit_of_measurement: "W"
 
  - platform: template
    name: "#2 Home power"
    id: home_power_sensor_2
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: "W"
 

#---SENSORS MODBUS_ADDR 1 -----------------------------------

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     name: "#1 SOC"
#     id: batt_soc_sensor_1
#     icon: mdi:battery-charging-medium
#     register_type: read
#     address: 36155
#     unit_of_measurement: "%"

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     name: "#1 PV1 power"
#     id: pv1_power_sensor_1
#     icon: mdi:solar-power-variant-outline
#     register_type: read
#     address: 36112
#     unit_of_measurement: "W"

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     name: "#1 PV2 power"
#     id: pv2_power_sensor_1
#     icon: mdi:solar-power-variant-outline
#     register_type: read
#     address: 36113
#     unit_of_measurement: "W"
#     on_value:
#       - sensor.template.publish:
#           id: pv_power_sensor_1
#           state: !lambda 'return (id(pv2_power_sensor_1).state + id(pv1_power_sensor_1).state);' # calculate PV Power
# #       - sensor.template.publish:
# #           id: pv_power_sensor
# #           state: !lambda 'return (id(pv2_power_sensor_1).state + id(pv1_power_sensor_1).state + id(pv2_power_sensor_2).state + id(pv1_power_sensor_2).state);' # calculate PV Power

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     name: "#1 Grid power"
#     id: grid_power_sensor_1
#     icon: mdi:transmission-tower
#     register_type: read
#     address: 36131
#     unit_of_measurement: "W"
#     value_type: S_DWORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     name: "#1 Battery power"
#     id: battery_power_sensor_1
#     icon: mdi:home-lightning-bolt-outline
#     register_type: read
#     address: 36138
#     unit_of_measurement: "W"
#     value_type: S_DWORD
#     on_value:
#       - sensor.template.publish:
#           id: home_power_sensor_1
#           state: !lambda 'return (id(battery_power_sensor_1).state + id(pv_power_sensor_1).state + id(grid_power_sensor_1).state);' # calculate Home Power
# #       - sensor.template.publish:
# #           id: battery_power_sensor
# #           state: !lambda 'return (id(battery_power_sensor_1).state + id(battery_power_sensor_2).state);' # calculate Home Power
# #       - sensor.template.publish:
# #           id: home_power_sensor
# #           state: !lambda 'return (id(battery_power_sensor_1).state + id(pv_power_sensor_1).state + id(grid_power_sensor_1).state +  id(battery_power_sensor_2).state + id(pv_power_sensor_2).state + id(grid_power_sensor_2).state);' # calculate Home Power

#--- SENSORS MODBUS_ADDR 2 -----------------------------------

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 SOC"
    id: batt_soc_sensor_2
    icon: mdi:battery-charging-medium
    register_type: sniffer
    address: 36155
    unit_of_measurement: "%"
    # on_value:
    #   - sensor.template.publish:
    #       id: batt_soc_sensor
    #       state: !lambda 'return std::min(id(batt_soc_sensor_1).state, id(batt_soc_sensor_2).state);' # calculate SOC
    

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 48003"
    id: batt_48003
    #icon: mdi:battery-charging-medium
    register_type: sniffer
    address: 48003
    #unit_of_measurement: "%"

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 37500"
    id: batt_37500
    register_type: sniffer
    address: 37500

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 37501"
    id: batt_37501
    register_type: sniffer
    address: 37501

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 37502"
    id: batt_37502
    register_type: sniffer
    address: 37502

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 PV1 power"
    id: pv1_power_sensor_2
    icon: mdi:solar-power-variant-outline
    register_type: read
    address: 36112
    unit_of_measurement: "W"

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 PV2 power"
    id: pv2_power_sensor_2
    icon: mdi:solar-power-variant-outline
    register_type: read
    address: 36113
    unit_of_measurement: "W"
    on_value:
      - sensor.template.publish:
          id: pv_power_sensor_2
          state: !lambda 'return (id(pv2_power_sensor_2).state + id(pv1_power_sensor_2).state);' # calculate PV Power
  #     - sensor.template.publish:
  #         id: pv_power_sensor
  #         state: !lambda 'return (id(pv2_power_sensor_2).state + id(pv1_power_sensor_2).state + id(pv2_power_sensor_1).state + id(pv1_power_sensor_1).state );' # calculate PV Power
  
  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 Grid power"
    id: grid_power_sensor_2
    icon: mdi:transmission-tower
    register_type: read
    address: 36131
    value_type: S_DWORD
    unit_of_measurement: "W"

  - platform: modbus_controller
    modbus_controller_id: modbus_addr_2
    name: "#2 Battery power"
    id: battery_power_sensor_2
    icon: mdi:home-lightning-bolt-outline
    register_type: read
    address: 36138
    value_type: S_DWORD
    unit_of_measurement: "W"
    on_value:
      - sensor.template.publish:
          id: home_power_sensor_2
          state: !lambda 'return (id(battery_power_sensor_2).state + id(pv2_power_sensor_2).state + id(pv1_power_sensor_2).state + id(grid_power_sensor_2).state);' # calculate Home Power
  #     - sensor.template.publish:
  #         id: battery_power_sensor
  #         state: !lambda 'return (id(battery_power_sensor_1).state + id(battery_power_sensor_2).state);' # calculate Home Power
  #     - sensor.template.publish:
  #         id: home_power_sensor
  #         state: !lambda 'return (id(battery_power_sensor_1).state + id(pv_power_sensor_1).state + id(grid_power_sensor_1).state +  id(battery_power_sensor_2).state + id(pv_power_sensor_2).state + id(grid_power_sensor_2).state);' # calculate Home Power

#--- NOT USED  --------------------------

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV1 current"
  #   id: pv1_current_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36109
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV1 power"
  #   id: pv1_power_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36112
  #   unit_of_measurement: "W"

#Modbus addr_2 Sensors
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV1 voltage"
  #   id: pv1_voltage_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36108
  #   unit_of_measurement: "V"
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV1 current"
  #   id: pv1_current_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36109
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV2 voltage"
  #   id: pv2_voltage_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36110
  #   unit_of_measurement: "V"
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV2 current"
  #   id: pv2_current_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36111
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV1 power"
  #   id: pv1_power_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36112
  #   unit_of_measurement: "W"

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 PV2 power"
  #   id: pv2_power_sensor_2
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36113
  #   unit_of_measurement: "W"
  #   on_value:
  #     - sensor.template.publish:
  #         id: pv_power_sensor_2
  #         state: !lambda 'return (id(pv2_power_sensor_2).state + id(pv1_power_sensor_2).state);' # calculate PV Power
  
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 Grid power"
  #   id: grid_power_sensor_2
  #   icon: mdi:transmission-tower
  #   register_type: read
  #   address: 36131
  #   unit_of_measurement: "W"  

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_2
  #   name: "#2 Battery power"
  #   id: battery_power_sensor_2
  #   icon: mdi:home-lightning-bolt-outline
  #   register_type: read
  #   address: 36138
  #   unit_of_measurement: "W"
  #   on_value:
  #     - sensor.template.publish:
  #         id: home_power_sensor_2
  #         state: !lambda 'return (id(battery_power_sensor_2).state + id(pv_power_sensor_2).state + id(grid_power_sensor_2).state);' # calculate Home Power


#Modbus addr_1 Sensors
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV1 voltage"
  #   id: pv1_voltage_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36108
  #   unit_of_measurement: "V"
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV1 current"
  #   id: pv1_current_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36109
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV2 voltage"
  #   id: pv2_voltage_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36110
  #   unit_of_measurement: "V"
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV2 current"
  #   id: pv2_current_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36111
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV1 power"
  #   id: pv1_power_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36112
  #   unit_of_measurement: "W"

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 PV2 power"
  #   id: pv2_power_sensor_1
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36113
  #   unit_of_measurement: "W"
  #   on_value:
  #     - sensor.template.publish:
  #         id: pv_power_sensor_1
  #         state: !lambda 'return (id(pv2_power_sensor_1).state + id(pv1_power_sensor_1).state);' # calculate PV Power
  
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 Grid power"
  #   id: grid_power_sensor_1
  #   icon: mdi:transmission-tower
  #   register_type: read
  #   address: 36131
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: S_DWORD

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "#1 Battery power"
  #   id: battery_power_sensor_1
  #   icon: mdi:home-lightning-bolt-outline
  #   register_type: read
  #   address: 36138
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: S_DWORD
  #   on_value:
  #     - sensor.template.publish:
  #         id: home_power_sensor_1
  #         state: !lambda 'return (id(battery_power_sensor_1).state + id(pv_power_sensor_1).state + id(grid_power_sensor_1).state);' # calculate Home Power

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "DSP Voltage"
  #   id: measure_voltage_dsp
  #   register_type: read
  #   address: 36114
  #   unit_of_measurement: "V"
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "DSP Current"
  #   id: measure_current_dsp
  #   register_type: read
  #   address: 36115
  #   unit_of_measurement: "A"
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "DSP Frequency"
  #   id: measure_frequency_dsp
  #   register_type: read
  #   address: 36116
  #   unit_of_measurement: "Hz"
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 0.01

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "DSP power"
  #   id: dsp_power_sensor
  #   icon: mdi:home-lightning-bolt-outline
  #   register_type: read
  #   address: 36117
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: U_DWORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Voltage GRID"
  #   id: measure_voltage_grid
  #   register_type: read
  #   address: 36122
  #   unit_of_measurement: "V"
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "EPS power"
  #   id: eps_power_sensor
  #   icon: mdi:home-lightning-bolt-outline
  #   register_type: read
  #   address: 36124
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 2

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Grid power"
  #   id: grid_power_sensor
  #   icon: mdi:transmission-tower
  #   register_type: read
  #   address: 36131
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: S_DWORD

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Battery power"
  #   id: battery_power_sensor
  #   icon: mdi:home-lightning-bolt-outline
  #   register_type: read
  #   address: 36138
  #   unit_of_measurement: "W"
  #   register_count: 2
  #   value_type: S_DWORD
  #   on_value:
  #     - sensor.template.publish:
  #         id: home_power_sensor
  #         state: !lambda 'return (id(battery_power_sensor).state + id(pv_power_sensor).state + id(grid_power_sensor).state);' # calculate Home Power
  
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Battery voltage"
  #   id: measure_voltage_battery
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36151
  #   unit_of_measurement: "V"
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "SOC"
  #   id: batt_scoc_sensor
  #   icon: mdi:battery-charging-medium
  #   register_type: read
  #   address: 36155
  #   unit_of_measurement: "%"
  #   skip_updates: 12 #Every minute
  
  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "SOH"
  #   id: batt_scoh_sensor
  #   icon: mdi:battery-charging-medium
  #   register_type: read
  #   address: 36156
  #   unit_of_measurement: "%"
  #   skip_updates: 3600 #Every 5 Hours

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Battery temp max"
  #   id: temperature_battery_high
  #   icon: mdi:thermometer-high
  #   register_type: read
  #   address: 36161
  #   unit_of_measurement: "°C"
  #   skip_updates: 60 #Every 5 minutes
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Battery temp min"
  #   id: temperature_battery_min
  #   icon: mdi:thermometer-low
  #   register_type: read
  #   address: 36163
  #   unit_of_measurement: "°C"
  #   skip_updates: 60 #Every 5 minutes
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Total charge"
  #   id: meter_power_total_batteru_charge
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36201
  #   skip_updates: 12 #Every minute
  #   unit_of_measurement: "kWh"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Total discharge"
  #   id: meter_power_total_battery_discharge
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36203
  #   skip_updates: 12 #Every minute
  #   unit_of_measurement: "kWh"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Total to grid"
  #   id: meter_power_total_to_grid
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36209
  #   skip_updates: 12 #Every minute
  #   unit_of_measurement: "kWh"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Total from grid"
  #   id: meter_power_total_from_grid
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36211
  #   skip_updates: 12 #Every minute
  #   unit_of_measurement: "kWh"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_addr_1
  #   name: "Total PV"
  #   id: meter_power_pv
  #   icon: mdi:solar-power-variant-outline
  #   register_type: read
  #   address: 36213
  #   skip_updates: 30
  #   unit_of_measurement: "kWh"
  #   register_count: 2
  #   value_type: S_DWORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

 
text_sensor:
  # - platform: modbus_controller
  #   skip_updates: 1800
  #   modbus_controller_id: modbus_addr_1
  #   id: DSP1_vers_text
  #   icon: mdi:numeric
  #   bitmask: 0
  #   register_type: read
  #   address: 36020
  #   name: "DSP1 version"
  #   response_size: 12

  # - platform: modbus_controller
  #   skip_updates: 1800
  #   modbus_controller_id: modbus_addr_1
  #   id: DSP2_vers_text
  #   icon: mdi:numeric
  #   bitmask: 0
  #   register_type: read
  #   address: 36028
  #   name: "DSP2 version"
  #   response_size: 12

  # - platform: modbus_controller
  #   skip_updates: 1800
  #   modbus_controller_id: modbus_addr_1
  #   id: EMS_vers_text
  #   icon: mdi:numeric
  #   bitmask: 0
  #   register_type: read
  #   address: 36036
  #   name: "EMS version"
  #   response_size: 12

  # - platform: modbus_controller
  #   skip_updates: 1800
  #   modbus_controller_id: modbus_addr_1
  #   id: BMS_vers_text
  #   icon: mdi:numeric
  #   bitmask: 0
  #   register_type: read
  #   address: 36044
  #   name: "BMS version"
  #   response_size: 12

# output:
#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     id: workmode_modbus_output
#     register_type: holding  
#     write_lambda: |-
#       int workmode_var_value = id(workmode_var);
#       uint16_t value_to_send = 0;  // set default

#       if (workmode_var_value == 0) {
#         value_to_send = 0;
#       } else if (workmode_var_value == 1) {
#         value_to_send = 1;
#       } else if (workmode_var_value == 2) {
#         value_to_send = 2;
#       } else if (workmode_var_value == 3) {
#         value_to_send = 3;
#       }

#       return value_to_send;
#     address: 60001
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     id: max_feedin_selector_modbus_output
#     register_type: holding
#     write_lambda: |-
#       int max_feedin_selector_var_value = id(max_feedin_selector_var);
#       uint16_t value_to_send = 10;  // Set default
#       value_to_send = max_feedin_selector_var_value;
#       return value_to_send;
#     address: 60003
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     id: Power_Ref_Selector_modbus_output
#     register_type: holding
#     write_lambda: |-
#       uint Power_Ref_Selector_var_value = id(Power_Ref_Selector_var);
#       uint16_t value_to_send = 0;  // Set default
#       value_to_send = Power_Ref_Selector_var_value;
#       return value_to_send;
#     address: 60004
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     id: VPP_timer_modbus_output
#     register_type: holding  
#     write_lambda: |-
#       int VPP_timer_var_value = id(VPP_timer_var);
#       uint16_t value_to_send = 0;  // Set default
#       value_to_send = VPP_timer_var_value;
#       return value_to_send;
#     address: 60007
#     value_type: U_WORD

#   - platform: modbus_controller
#     id: VPP_timer_selector_modbus_output
#     modbus_controller_id: modbus_addr_1
#     register_type: holding
#     write_lambda: |-
#       uint VPP_timer_selector_var_value = id(VPP_timer_selector_var);
#       uint16_t value_to_send = 0;  // Set default
#       value_to_send = VPP_timer_selector_var_value;
#       return value_to_send;
#     address: 60008
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_addr_1
#     id: batt_min_capacity_modbus_output
#     register_type: holding  
#     write_lambda: |-
#       int batt_min_capacity_var_value = id(batt_min_capacity_var);
#       uint16_t value_to_send = 10;  // Set default
#       value_to_send = batt_min_capacity_var_value;
#       return value_to_send;
#     address: 60009
#     value_type: U_WORD

# select:
#   - platform: template
#     name: "Workmode Selector"
#     id: workmode
#     optimistic: true
#     options: 
#       - "normal mode"
#       - "selfconsumption or forced charge/discharge"  #selfconsumptionn or forced charge/discharge
#       - "charge only on PV" #for 60001=2, that is VPP mode4 in the API document, the function is charge only, means when there is PV production, the battery will charge, but when there is no PV production, the battery will not discharge to support the home load. 
#       #The energy is stored always, in case that you predict that there will be high electricity price in the coming hours, you save the energy to be used by then
#       - "discharge only" #for 60001=3, that is VPP mode 5 in the API document, the function is discharge only, means when there is PV production, the battery will not charge neither, and when there is no PV production, the battery will discharge .
#       #This mode is to leave the capacity of the battery to charge when there is say minus price.
#     initial_option: "normal mode"  # Set initial value
#     on_value:
#       then:
#         - lambda: |-
#             // ESP_LOGD("Modbus Sensor Lambda","select mode" );
#             if (id(workmode).state == "normal mode") {
#             id(workmode_var) = 0;
#             } else if (id(workmode).state == "selfconsumption or forced charge/discharge") {
#               id(workmode_var) = 1;
#             } else if (id(workmode).state == "charge on PV only") {
#               id(workmode_var) = 2;
#             } else if (id(workmode).state == "discharge only") {
#               id(workmode_var) = 3;
#             }

#   - platform: template
#     name: "Batt Min Capacity Selector"
#     id: batt_min_capacity
#     optimistic: true
#     options: 
#       - "10%"
#       - "20%"
#       - "30%"
#       - "40%"
#       - "50%"
#       - "60%"
#       - "70%"
#       - "80%"
#       - "90%"
#       - "100%"
#     initial_option: "10%"  # Set initial value
#     on_value:
#      then:
#         - lambda: |-
#             if (id(batt_min_capacity).state == "10%") {
#               id(batt_min_capacity_var) = 10;
#             } else if (id(batt_min_capacity).state == "20%") {
#               id(batt_min_capacity_var) = 20;
#             } else if (id(batt_min_capacity).state == "30%") {
#              id(batt_min_capacity_var) = 30;
#             } else if (id(batt_min_capacity).state == "40%") {
#               id(batt_min_capacity_var) = 40;
#             } else if (id(batt_min_capacity).state == "50%") {
#               id(batt_min_capacity_var) = 50;
#             } else if (id(batt_min_capacity).state == "60%") {
#               id(batt_min_capacity_var) = 60;
#             } else if (id(batt_min_capacity).state == "70%") {
#               id(batt_min_capacity_var) = 70;
#             } else if (id(batt_min_capacity).state == "80%") {
#               id(batt_min_capacity_var) = 80;
#             } else if (id(batt_min_capacity).state == "90%") {
#               id(batt_min_capacity_var) = 90;
#             } else if (id(batt_min_capacity).state == "100%") {
#               id(batt_min_capacity_var) = 100;
#             }

#   - platform: template
#     name: "Max Feedin Selector"
#     id: max_feedin_selector
#     optimistic: true
#     options: 
#       - "10%"
#       - "20%"
#       - "30%"
#       - "40%"
#       - "50%"
#       - "60%"
#       - "70%"
#       - "80%"
#       - "90%"
#       - "100%"
#     initial_option: "100%"  # Set initial value
#     on_value:
#      then:
#         - lambda: |-
#             if (id(max_feedin_selector).state == "10%") {
#               id(max_feedin_selector_var) = 10;
#             } else if (id(max_feedin_selector).state == "20%") {
#               id(max_feedin_selector_var) = 20;
#             } else if (id(max_feedin_selector).state == "30%") {
#              id(max_feedin_selector_var) = 30;
#             } else if (id(max_feedin_selector).state == "40%") {
#               id(max_feedin_selector_var) = 40;
#             } else if (id(max_feedin_selector).state == "50%") {
#               id(max_feedin_selector_var) = 50;
#             } else if (id(max_feedin_selector).state == "60%") {
#               id(max_feedin_selector_var) = 60;
#             } else if (id(max_feedin_selector).state == "70%") {
#               id(max_feedin_selector_var) = 70;
#             } else if (id(max_feedin_selector).state == "80%") {
#               id(max_feedin_selector_var) = 80;
#             } else if (id(max_feedin_selector).state == "90%") {
#               id(max_feedin_selector_var) = 90;
#             } else if (id(max_feedin_selector).state == "100%") {
#               id(max_feedin_selector_var) = 100;
#             }

#   - platform: template
#     name: "VPP Time Selector"
#     id: VPP_timer
#     optimistic: true
#     options: 
#       - "30 sec"
#       - "5 min"
#       - "30 min"
#       - "1 hour"
#     initial_option: "30 sec"  # Set initial value
#     on_value:
#       then:
#         - lambda: |-
#             // ESP_LOGD("Modbus Sensor Lambda","select mode" );
#             if (id(VPP_timer).state == "30 sec") {
#             id(VPP_timer_var) = 30;
#             } else if (id(VPP_timer).state == "5 min") {
#               id(VPP_timer_var) = 300;
#             } else if (id(VPP_timer).state == "30 min") {
#               id(VPP_timer_var) = 1800;
#             } else if (id(VPP_timer).state == "1 hour") {
#               id(VPP_timer_var) = 3600;
#             }

#   - platform: template
#     name: "VPP timer on/off"
#     id: VPP_timer_selector
#     optimistic: True
#     options:
#       - "VPP timer on"
#       - "VPP timer off"
#     initial_option: "VPP timer off"  # Set initial value
#     on_value:
#       then:
#         - lambda: |-
#             if (id(VPP_timer_selector).state == "VPP timer on") {
#               id(VPP_timer_selector_var) = 1;
#             } else if (id(VPP_timer_selector).state == "VPP timer off") {
#               id(VPP_timer_selector_var) = 0;
#             }
        
#   - platform: template
#     name: "power ref selector"
#     id: Power_Ref_Selector
#     optimistic: True
#     options:
#       - "20kW charge" 
#       - "15kW charge" 
#       - "10kW charge"
#       - "5kW charge"
#       - "4kW charge"
#       - "3kW charge"
#       - "2kW charge"
#       - "1kW charge"
#       - "0"
#       - "1kW discharge"
#       - "2kW discharge"
#       - "3kW discharge"
#       - "4kW discharge"
#       - "5kW discharge"
#       - "10kW discharge"
#       - "15kW discharge"
#       - "20kW discharge"
#     initial_option: "0"  # Set initial value
#     on_value:
#       then:
#         - lambda: |-
#             if (id(Power_Ref_Selector).state == "20kW charge") {
#               id(Power_Ref_Selector_var) = -20000;
#             } else if (id(Power_Ref_Selector).state == "15kW charge") {
#               id(Power_Ref_Selector_var) = -15000;
#             } else if (id(Power_Ref_Selector).state == "10kW charge") {
#               id(Power_Ref_Selector_var) = -10000;
#             } else if (id(Power_Ref_Selector).state == "5kW charge") {
#               id(Power_Ref_Selector_var) = -5000;
#             } else if (id(Power_Ref_Selector).state == "4kW charge") {
#               id(Power_Ref_Selector_var) = -4000;
#             } else if (id(Power_Ref_Selector).state == "3kW charge") {
#               id(Power_Ref_Selector_var) = -3000;
#             } else if (id(Power_Ref_Selector).state == "2kW charge") {
#               id(Power_Ref_Selector_var) = -2000;
#             } else if (id(Power_Ref_Selector).state == "1kW charge") {
#               id(Power_Ref_Selector_var) = -1000;
#             } else if (id(Power_Ref_Selector).state == "0") {
#               id(Power_Ref_Selector_var) = 0;
#             } else if (id(Power_Ref_Selector).state == "1kW discharge") {
#               id(Power_Ref_Selector_var) = 1000;
#             } else if (id(Power_Ref_Selector).state == "2kW discharge") {
#               id(Power_Ref_Selector_var) = 2000;
#             } else if (id(Power_Ref_Selector).state == "3kW discharge") {
#               id(Power_Ref_Selector_var) = 3000;
#             } else if (id(Power_Ref_Selector).state == "4kW discharge") {
#               id(Power_Ref_Selector_var) = 4000;
#             } else if (id(Power_Ref_Selector).state == "5kW discharge") {
#               id(Power_Ref_Selector_var) = 5000;
#             } else if (id(Power_Ref_Selector).state == "10kW discharge") {
#               id(Power_Ref_Selector_var) = 10000;
#             } else if (id(Power_Ref_Selector).state == "15kW discharge") {
#               id(Power_Ref_Selector_var) = 15000;
#             }else if (id(Power_Ref_Selector).state == "20kW discharge") {
#               id(Power_Ref_Selector_var) = 20000;
#             }

# button:
#   - platform: template
#     name: change modus
#     id: change_modus
#     icon: mdi:cog-refresh-outline
#     on_press:
#       - logger.log: "set modus on button pressed"
#       - output.turn_on: workmode_modbus_output
#       - output.turn_on: VPP_timer_modbus_output
#       - output.turn_on: batt_min_capacity_modbus_output
#       - output.turn_on: Power_Ref_Selector_modbus_output
#       - output.turn_on: VPP_timer_selector_modbus_output
#       - output.turn_on: max_feedin_selector_modbus_output